allprojects {
    buildscript {
        repositories {
            google()
        }
    }
}

apply plugin: 'com.android.library'

repositories {
    google()
    mavenCentral()
    flatDir {
        dirs 'libs'
        dirs "${projectDir}/libs"
        dirs "${rootProject.projectDir}/unityLibrary/libs"
    }
}


dependencies {
    implementation 'com.google.ar:core:1.45.0'
    api fileTree(dir: 'libs', include: ['*.jar'])
    implementation(name: 'VuforiaEngine', ext:'aar')

}

android {
    namespace "com.unity3d.player"
    ndkVersion "27.0.12077973"
    compileSdkVersion 35
    buildToolsVersion '34.0.0'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    defaultConfig {
        minSdkVersion 29
        targetSdkVersion 35
        ndk {
            abiFilters 'arm64-v8a'
        }
        versionCode 1
        versionName '0.1'
        consumerProguardFiles 'proguard-unity.txt'
    }

    lintOptions {
        abortOnError false
    }

    androidResources {
        noCompress += ['.unity3d', '.ress', '.resource', '.obb', '.bundle', '.unityexp']
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    packagingOptions {
        doNotStrip '*/arm64-v8a/*.so'
    }
}

def getSdkDir() {
    Properties local = new Properties()
    local.load(new FileInputStream("${rootDir}/local.properties"))
    return local.getProperty('sdk.dir')
}

// Resolve il2cpp executable with explicit overrides first
def findIl2cppExecutable(String workingDir) {
    def isWin = org.gradle.internal.os.OperatingSystem.current().isWindows()
    def exeName = isWin ? "il2cpp.exe" : "il2cpp"
    def tried = []

    // 0) Explicit property: il2cpp.path
    def fromProp = project.findProperty("il2cpp.path")
    if (fromProp != null) {
        tried << fromProp
        if (file(fromProp).exists()) return fromProp
    }

    // 1) From unity.executablePath => .../Editor/Data/il2cpp/build/deploy/il2cpp(.exe)
    def unityExe = project.findProperty("unity.executablePath") ?: project.findProperty("unityPath")
    if (unityExe != null) {
        def editorDir = new File(unityExe).getParentFile()                      // .../Editor
        def dataDir   = new File(editorDir, "Data")
        def il2cpp    = new File(new File(new File(dataDir, "il2cpp"), "build/deploy"), exeName)
        tried << il2cpp.absolutePath
        if (il2cpp.exists()) return il2cpp.absolutePath
    }

    // 2) From UNITY_HOME env => .../Editor/Data/il2cpp/...
    def unityHome = System.getenv("UNITY_HOME")
    if (unityHome != null) {
        def il2cpp = new File("${unityHome}/Editor/Data/il2cpp/build/deploy/${exeName}")
        tried << il2cpp.absolutePath
        if (il2cpp.exists()) return il2cpp.absolutePath
    }

    // 3) (fallback) exported project's local copy (종종 불완전하므로 우선순위 낮춤)
    def localPath = "${workingDir}/src/main/Il2CppOutputProject/IL2CPP/build/deploy/${exeName}"
    tried << localPath
    if (file(localPath).exists()) return localPath

    // 4) (fallback) Unity Hub 기본 설치 위치 스캔
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        def hubRoot = file("/Applications/Unity/Hub/Editor")
        if (hubRoot.exists()) {
            def found = fileTree(hubRoot).matching {
                include("**/Unity.app/Contents/il2cpp/build/deploy/${exeName}")
            }.files
            if (!found.isEmpty()) return found.first().absolutePath
        }
        tried << "/Applications/Unity/Hub/Editor/**/Unity.app/Contents/il2cpp/build/deploy/${exeName}"
    } else if (isWin) {
        // Hub 기본 경로
        def hubRoot = file("C:/Program Files/Unity/Hub/Editor")
        if (hubRoot.exists()) {
            def found = fileTree(hubRoot).matching {
                include("**/Editor/Data/il2cpp/build/deploy/${exeName}")
            }.files
            if (!found.isEmpty()) return found.first().absolutePath
        }
        tried << "C:/Program Files/Unity/Hub/Editor/**/Editor/Data/il2cpp/build/deploy/${exeName}"
    } else { // Linux
        def hubRoot = file(System.properties['user.home'] + "/Unity/Hub/Editor")
        if (hubRoot.exists()) {
            def found = fileTree(hubRoot).matching {
                include("**/Editor/Data/il2cpp/build/deploy/${exeName}")
            }.files
            if (!found.isEmpty()) return found.first().absolutePath
        }
        tried << "${System.properties['user.home']}/Unity/Hub/Editor/**/Editor/Data/il2cpp/build/deploy/${exeName}"
    }

    throw org.gradle.api.GradleException.new("il2cpp executable not found. Tried:\n - " + tried.join("\n - "))
}


def BuildIl2Cpp(String workingDir, String configuration, String architecture, String abi, String[] staticLibraries) {
    def commandLineArgs = []
    commandLineArgs.add("--compile-cpp")
    commandLineArgs.add("--platform=Android")
    commandLineArgs.add("--architecture=" + architecture)
    commandLineArgs.add("--outputpath=" + workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.so")
    commandLineArgs.add("--baselib-directory=" + workingDir + "/src/main/jniStaticLibs/" + abi)
    commandLineArgs.add("--incremental-g-c-time-slice=3")
    commandLineArgs.add("--configuration=" + configuration)
    commandLineArgs.add("--dotnetprofile=unityaot-linux")
    commandLineArgs.add("--profiler-report")
    commandLineArgs.add("--profiler-output-file=" + workingDir + "/build/il2cpp_"+ abi + "_" + configuration + "/il2cpp_conv.traceevents")
    commandLineArgs.add("--print-command-line")
    commandLineArgs.add("--data-folder=" + workingDir + "/src/main/Il2CppOutputProject/Source/il2cppOutput/data")
    commandLineArgs.add("--generatedcppdir=" + workingDir + "/src/main/Il2CppOutputProject/Source/il2cppOutput")
    commandLineArgs.add("--cachedirectory=" + workingDir + "/build/il2cpp_"+ abi + "_" + configuration + "/il2cpp_cache")
    commandLineArgs.add("--tool-chain-path=" + android.ndkDirectory)
    staticLibraries.eachWithIndex {fileName, i->
        commandLineArgs.add("--additional-libraries=" + workingDir + "/src/main/jniStaticLibs/" + abi + "/" + fileName)
    }
    // Resolve il2cpp path per‑OS and ensure it is executable on Unix
    def il2cppPath = "C:/Program Files/Unity 6000.0.40f1/Editor/Data/il2cpp/build/deploy/il2cpp.exe"
    if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        try {
            file(il2cppPath).setExecutable(true)
        } catch (Throwable ignore) { }
    }
    exec {
        executable il2cppPath
        args commandLineArgs
        environment "ANDROID_SDK_ROOT", getSdkDir()
    }
    delete workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.sym.so"
    ant.move(file: workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.dbg.so", tofile: workingDir + "/symbols/" + abi + "/libil2cpp.so")
}

android {
    task BuildIl2CppTask {
        doLast {
              BuildIl2Cpp(projectDir.toString().replaceAll('\\\\', '/'), 'Release', 'arm64', 'arm64-v8a', [  ] as String[]);
        }
    }
    afterEvaluate {
        if (project(':unityLibrary').tasks.findByName('mergeDebugJniLibFolders'))
            project(':unityLibrary').mergeDebugJniLibFolders.dependsOn BuildIl2CppTask
        if (project(':unityLibrary').tasks.findByName('mergeReleaseJniLibFolders'))
            project(':unityLibrary').mergeReleaseJniLibFolders.dependsOn BuildIl2CppTask
    }
    sourceSets {
        main {
            jni.srcDirs = ["src/main/Il2CppOutputProject"]
        }
    }
}